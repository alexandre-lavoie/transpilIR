const std = @import("std");

const common = @import("../common.zig");

pub const QBEToken = struct {
    token_type: QBETokenType,
    span: common.SourceSpan = common.SourceSpan{},

    const Self = @This();

    pub fn init(token_type: QBETokenType) Self {
        return Self{ .token_type = token_type };
    }
};

pub const QBETokenType = enum(u8) {
    // Module
    module_start,
    module_end,

    // Identifiers
    global_identifier,
    label_identifier,
    local_identifier,
    type_identifier,

    // Literals
    string_literal,
    single_literal,
    double_literal,
    integer_literal,

    // Punctuations
    comma,
    open_parenthesis,
    close_parenthesis,
    open_curly_brace,
    close_curly_brace,
    variable_arguments,
    plus,
    assign,

    // Reserved Words
    byte_unsigned,
    byte,
    common,
    data,
    debug_file,
    debug_location,
    double,
    env,
    @"export",
    function,
    long,
    long_unsigned,
    section,
    single,
    thread,
    type,
    word_unsigned,
    word,
    zero,

    // Operations
    addition,
    @"align",
    allocate,
    any_load,
    arthimetic_shift_right,
    bitwise_and,
    bitwise_or,
    bitwise_xor,
    blit,
    byte_load_unsigned,
    byte_load,
    byte_store,
    byte_to_integer_unsigned,
    byte_to_integer,
    call,
    cast,
    copy,
    divide_unsigned,
    divide,
    double_not_nan,
    double_any_nan,
    double_equal,
    double_greater_than_equal,
    double_greater_than,
    double_less_than_equal,
    double_less_than,
    double_load,
    double_not_equal,
    double_store,
    double_to_single,
    double_to_integer_unsigned,
    double_to_integer,
    half_word_load_unsigned,
    half_word_load,
    half_word_store,
    half_word_to_integer_unsigned,
    half_word_to_integer,
    half_word_unsigned,
    half_word,
    halt,
    jump_not_zero,
    jump,
    long_equal,
    long_greater_than_equal_unsigned,
    long_greater_than_equal,
    long_greater_than_unsigned,
    long_greater_than,
    long_less_than_equal_unsigned,
    long_less_than_equal,
    long_less_than_unsigned,
    long_less_than,
    long_load,
    long_not_equal,
    long_store,
    long_to_float_unsigned,
    long_to_float,
    multiply,
    negate,
    phi,
    remainder_unsigned,
    remainder,
    @"return",
    shift_left,
    shift_right,
    single_not_nan,
    single_any_nan,
    single_equal,
    single_greater_than_equal,
    single_greater_than,
    single_less_than_equal,
    single_less_than,
    single_load,
    single_not_equal,
    single_store,
    single_to_double,
    single_to_integer_unsigned,
    single_to_integer,
    subtract,
    vaarg,
    vastart,
    word_equal,
    word_greater_than_equal_unsigned,
    word_greater_than_equal,
    word_greater_than_unsigned,
    word_greater_than,
    word_less_than_equal_unsigned,
    word_less_than_equal,
    word_less_than_unsigned,
    word_less_than,
    word_load_unsigned,
    word_load,
    word_not_equal,
    word_store,
    word_to_long_unsigned,
    word_to_long,
    word_to_float_unsigned,
    word_to_float,

    // Interal spacing
    newline,
    tab,
};

pub fn tokenString(token_type: QBETokenType) []const u8 {
    return switch (token_type) {
        .comma => ",",
        .open_parenthesis => "(",
        .close_parenthesis => ")",
        .open_curly_brace => "{",
        .close_curly_brace => "}",
        .variable_arguments => "...",
        .plus => "+",
        .assign => "=",
        .addition => "add",
        .@"align" => "align",
        .allocate => "alloc",
        .bitwise_and => "and",
        .byte => "b",
        .blit => "blit",
        .call => "call",
        .cast => "cast",
        .double_equal => "ceqd",
        .long_equal => "ceql",
        .single_equal => "ceqs",
        .word_equal => "ceqw",
        .double_greater_than_equal => "cged",
        .single_greater_than_equal => "cges",
        .double_greater_than => "cgtd",
        .single_greater_than => "cgts",
        .double_less_than_equal => "cled",
        .single_less_than_equal => "cles",
        .double_less_than => "cltd",
        .single_less_than => "clts",
        .double_not_equal => "cned",
        .long_not_equal => "cnel",
        .single_not_equal => "cnes",
        .word_not_equal => "cnew",
        .double_not_nan => "cod",
        .common => "common",
        .copy => "copy",
        .single_not_nan => "cos",
        .long_greater_than_equal => "csgel",
        .word_greater_than_equal => "csgew",
        .long_greater_than => "csgtl",
        .word_greater_than => "csgtw",
        .long_less_than_equal => "cslel",
        .word_less_than_equal => "cslew",
        .long_less_than => "csltl",
        .word_less_than => "csltw",
        .long_greater_than_equal_unsigned => "cugel",
        .word_greater_than_equal_unsigned => "cugew",
        .long_greater_than_unsigned => "cugtl",
        .word_greater_than_unsigned => "cugtw",
        .long_less_than_equal_unsigned => "culel",
        .word_less_than_equal_unsigned => "culew",
        .long_less_than_unsigned => "cultl",
        .word_less_than_unsigned => "cultw",
        .double_any_nan => "cuod",
        .single_any_nan => "cuos",
        .double => "d",
        .data => "data",
        .debug_file => "dbgfile",
        .debug_location => "dbgloc",
        .divide => "div",
        .double_to_integer => "dtosi",
        .double_to_integer_unsigned => "dtoui",
        .env => "env",
        .@"export" => "export",
        .single_to_double => "exts",
        .byte_to_integer => "extsb",
        .half_word_to_integer => "extsh",
        .word_to_long => "extsw",
        .byte_to_integer_unsigned => "extub",
        .half_word_to_integer_unsigned => "extuh",
        .word_to_long_unsigned => "extuw",
        .function => "function",
        .half_word => "h",
        .halt => "hlt",
        .jump => "jmp",
        .jump_not_zero => "jnz",
        .long => "l",
        .long_unsigned => "ul",
        .double_load => "loadd",
        .long_load => "loadl",
        .single_load => "loads",
        .byte_load => "loadsb",
        .half_word_load => "loadsh",
        .word_load => "loadsw",
        .byte_load_unsigned => "loadub",
        .half_word_load_unsigned => "loaduh",
        .word_load_unsigned => "loaduw",
        .any_load => "load",
        .multiply => "mul",
        .negate => "neg",
        .bitwise_or => "or",
        .phi => "phi",
        .remainder => "rem",
        .@"return" => "ret",
        .single => "s",
        .arthimetic_shift_right => "sar",
        .section => "section",
        .shift_left => "shl",
        .shift_right => "shr",
        .long_to_float => "sltof",
        .byte_store => "storeb",
        .double_store => "stored",
        .half_word_store => "storeh",
        .long_store => "storel",
        .single_store => "stores",
        .word_store => "storew",
        .single_to_integer => "stosi",
        .single_to_integer_unsigned => "stoui",
        .subtract => "sub",
        .word_to_float => "swtof",
        .thread => "thread",
        .double_to_single => "truncd",
        .type => "type",
        .byte_unsigned => "ub",
        .divide_unsigned => "udiv",
        .half_word_unsigned => "uh",
        .long_to_float_unsigned => "ultof",
        .remainder_unsigned => "urem",
        .word_unsigned => "uw",
        .word_to_float_unsigned => "uwtof",
        .vaarg => "vaarg",
        .vastart => "vastart",
        .word => "w",
        .bitwise_xor => "xor",
        .zero => "z",
        .newline => "\n",
        .tab => "    ",
        .module_start,
        .module_end,
        .global_identifier,
        .label_identifier,
        .local_identifier,
        .type_identifier,
        .string_literal,
        .integer_literal,
        .single_literal,
        .double_literal,
        => "",
    };
}

pub const longest_reserved_word = 10;
pub const reserved_words = std.StaticStringMap(QBETokenType).initComptime(.{
    .{ "loadw", .word_load },
    .{ "sh", .half_word },
    .{ "sw", .word },
    .{ tokenString(.@"align"), .@"align" },
    .{ tokenString(.@"export"), .@"export" },
    .{ tokenString(.@"return"), .@"return" },
    .{ tokenString(.addition), .addition },
    .{ tokenString(.allocate), .allocate },
    .{ tokenString(.any_load), .any_load },
    .{ tokenString(.arthimetic_shift_right), .arthimetic_shift_right },
    .{ tokenString(.bitwise_and), .bitwise_and },
    .{ tokenString(.bitwise_or), .bitwise_or },
    .{ tokenString(.bitwise_xor), .bitwise_xor },
    .{ tokenString(.blit), .blit },
    .{ tokenString(.byte_load_unsigned), .byte_load_unsigned },
    .{ tokenString(.byte_load), .byte_load },
    .{ tokenString(.byte_store), .byte_store },
    .{ tokenString(.byte_to_integer_unsigned), .byte_to_integer_unsigned },
    .{ tokenString(.byte_to_integer), .byte_to_integer },
    .{ tokenString(.byte_unsigned), .byte_unsigned },
    .{ tokenString(.byte), .byte },
    .{ tokenString(.byte), .byte },
    .{ tokenString(.call), .call },
    .{ tokenString(.cast), .cast },
    .{ tokenString(.common), .common },
    .{ tokenString(.copy), .copy },
    .{ tokenString(.data), .data },
    .{ tokenString(.debug_file), .debug_file },
    .{ tokenString(.debug_location), .debug_location },
    .{ tokenString(.divide_unsigned), .divide_unsigned },
    .{ tokenString(.divide), .divide },
    .{ tokenString(.double_not_nan), .double_not_nan },
    .{ tokenString(.double_any_nan), .double_any_nan },
    .{ tokenString(.double_equal), .double_equal },
    .{ tokenString(.double_greater_than_equal), .double_greater_than_equal },
    .{ tokenString(.double_greater_than), .double_greater_than },
    .{ tokenString(.double_less_than_equal), .double_less_than_equal },
    .{ tokenString(.double_less_than), .double_less_than },
    .{ tokenString(.double_load), .double_load },
    .{ tokenString(.double_not_equal), .double_not_equal },
    .{ tokenString(.double_store), .double_store },
    .{ tokenString(.double_to_integer_unsigned), .double_to_integer_unsigned },
    .{ tokenString(.double_to_integer), .double_to_integer },
    .{ tokenString(.double_to_single), .double_to_single },
    .{ tokenString(.double), .double },
    .{ tokenString(.env), .env },
    .{ tokenString(.function), .function },
    .{ tokenString(.half_word_load_unsigned), .half_word_load_unsigned },
    .{ tokenString(.half_word_load), .half_word_load },
    .{ tokenString(.half_word_store), .half_word_store },
    .{ tokenString(.half_word_to_integer_unsigned), .half_word_to_integer_unsigned },
    .{ tokenString(.half_word_to_integer), .half_word_to_integer },
    .{ tokenString(.half_word_unsigned), .half_word_unsigned },
    .{ tokenString(.half_word), .half_word },
    .{ tokenString(.halt), .halt },
    .{ tokenString(.jump_not_zero), .jump_not_zero },
    .{ tokenString(.jump), .jump },
    .{ tokenString(.long_equal), .long_equal },
    .{ tokenString(.long_greater_than_equal_unsigned), .long_greater_than_equal_unsigned },
    .{ tokenString(.long_greater_than_equal), .long_greater_than_equal },
    .{ tokenString(.long_greater_than_unsigned), .long_greater_than_unsigned },
    .{ tokenString(.long_greater_than), .long_greater_than },
    .{ tokenString(.long_less_than_equal_unsigned), .long_less_than_equal_unsigned },
    .{ tokenString(.long_less_than_equal), .long_less_than_equal },
    .{ tokenString(.long_less_than_unsigned), .long_less_than_unsigned },
    .{ tokenString(.long_less_than), .long_less_than },
    .{ tokenString(.long_load), .long_load },
    .{ tokenString(.long_not_equal), .long_not_equal },
    .{ tokenString(.long_store), .long_store },
    .{ tokenString(.long_to_float_unsigned), .long_to_float_unsigned },
    .{ tokenString(.long_to_float), .long_to_float },
    .{ tokenString(.long), .long },
    .{ tokenString(.multiply), .multiply },
    .{ tokenString(.negate), .negate },
    .{ tokenString(.phi), .phi },
    .{ tokenString(.remainder_unsigned), .remainder_unsigned },
    .{ tokenString(.remainder), .remainder },
    .{ tokenString(.section), .section },
    .{ tokenString(.shift_left), .shift_left },
    .{ tokenString(.shift_right), .shift_right },
    .{ tokenString(.single_not_nan), .single_not_nan },
    .{ tokenString(.single_any_nan), .single_any_nan },
    .{ tokenString(.single_equal), .single_equal },
    .{ tokenString(.single_greater_than_equal), .single_greater_than_equal },
    .{ tokenString(.single_greater_than), .single_greater_than },
    .{ tokenString(.single_less_than_equal), .single_less_than_equal },
    .{ tokenString(.single_less_than), .single_less_than },
    .{ tokenString(.single_load), .single_load },
    .{ tokenString(.single_not_equal), .single_not_equal },
    .{ tokenString(.single_store), .single_store },
    .{ tokenString(.single_to_double), .single_to_double },
    .{ tokenString(.single_to_integer_unsigned), .single_to_integer_unsigned },
    .{ tokenString(.single_to_integer), .single_to_integer },
    .{ tokenString(.single), .single },
    .{ tokenString(.subtract), .subtract },
    .{ tokenString(.thread), .thread },
    .{ tokenString(.type), .type },
    .{ tokenString(.vaarg), .vaarg },
    .{ tokenString(.vastart), .vastart },
    .{ tokenString(.word_equal), .word_equal },
    .{ tokenString(.word_greater_than_equal_unsigned), .word_greater_than_equal_unsigned },
    .{ tokenString(.word_greater_than_equal), .word_greater_than_equal },
    .{ tokenString(.word_greater_than_unsigned), .word_greater_than_unsigned },
    .{ tokenString(.word_greater_than), .word_greater_than },
    .{ tokenString(.word_less_than_equal_unsigned), .word_less_than_equal_unsigned },
    .{ tokenString(.word_less_than_equal), .word_less_than_equal },
    .{ tokenString(.word_less_than_unsigned), .word_less_than_unsigned },
    .{ tokenString(.word_less_than), .word_less_than },
    .{ tokenString(.word_load_unsigned), .word_load_unsigned },
    .{ tokenString(.word_load), .word_load },
    .{ tokenString(.word_not_equal), .word_not_equal },
    .{ tokenString(.word_store), .word_store },
    .{ tokenString(.word_to_float_unsigned), .word_to_float_unsigned },
    .{ tokenString(.word_to_float), .word_to_float },
    .{ tokenString(.word_to_long_unsigned), .word_to_long_unsigned },
    .{ tokenString(.word_to_long), .word_to_long },
    .{ tokenString(.word_unsigned), .word_unsigned },
    .{ tokenString(.word), .word },
    .{ tokenString(.zero), .zero },
});

pub fn tokenColor(token_type: QBETokenType) std.io.tty.Color {
    return switch (token_type) {
        .module_start,
        .module_end,
        .newline,
        .tab,
        => .reset,

        .global_identifier => common.Color.global,
        .label_identifier => common.Color.label,
        .local_identifier => common.Color.local,
        .type_identifier => common.Color.type,

        .string_literal,
        .single_literal,
        .double_literal,
        .integer_literal,
        => common.Color.literal,

        .comma,
        .open_parenthesis,
        .close_parenthesis,
        .open_curly_brace,
        .close_curly_brace,
        .variable_arguments,
        .plus,
        .assign,
        => common.Color.punctuation,

        .byte_unsigned,
        .byte,
        .double,
        .env,
        .half_word_unsigned,
        .half_word,
        .long_unsigned,
        .long,
        .single,
        .word_unsigned,
        .word,
        .zero,
        => common.Color.type,

        .common,
        .data,
        .debug_file,
        .debug_location,
        .@"export",
        .function,
        .section,
        .thread,
        .type,
        .addition,
        .@"align",
        .allocate,
        .any_load,
        .arthimetic_shift_right,
        .bitwise_and,
        .bitwise_or,
        .bitwise_xor,
        .blit,
        .byte_load_unsigned,
        .byte_load,
        .byte_store,
        .byte_to_integer_unsigned,
        .byte_to_integer,
        .call,
        .cast,
        .copy,
        .divide_unsigned,
        .divide,
        .double_not_nan,
        .double_any_nan,
        .double_equal,
        .double_greater_than_equal,
        .double_greater_than,
        .double_less_than_equal,
        .double_less_than,
        .double_load,
        .double_not_equal,
        .double_store,
        .double_to_single,
        .double_to_integer_unsigned,
        .double_to_integer,
        .half_word_load_unsigned,
        .half_word_load,
        .half_word_store,
        .half_word_to_integer_unsigned,
        .half_word_to_integer,
        .halt,
        .jump_not_zero,
        .jump,
        .long_equal,
        .long_greater_than_equal_unsigned,
        .long_greater_than_equal,
        .long_greater_than_unsigned,
        .long_greater_than,
        .long_less_than_equal_unsigned,
        .long_less_than_equal,
        .long_less_than_unsigned,
        .long_less_than,
        .long_load,
        .long_not_equal,
        .long_store,
        .long_to_float_unsigned,
        .long_to_float,
        .multiply,
        .negate,
        .phi,
        .remainder_unsigned,
        .remainder,
        .@"return",
        .shift_left,
        .shift_right,
        .single_not_nan,
        .single_any_nan,
        .single_equal,
        .single_greater_than_equal,
        .single_greater_than,
        .single_less_than_equal,
        .single_less_than,
        .single_load,
        .single_not_equal,
        .single_store,
        .single_to_double,
        .single_to_integer_unsigned,
        .single_to_integer,
        .subtract,
        .vaarg,
        .vastart,
        .word_equal,
        .word_greater_than_equal_unsigned,
        .word_greater_than_equal,
        .word_greater_than_unsigned,
        .word_greater_than,
        .word_less_than_equal_unsigned,
        .word_less_than_equal,
        .word_less_than_unsigned,
        .word_less_than,
        .word_load_unsigned,
        .word_load,
        .word_not_equal,
        .word_store,
        .word_to_long_unsigned,
        .word_to_long,
        .word_to_float_unsigned,
        .word_to_float,
        => common.Color.reserved,
    };
}
